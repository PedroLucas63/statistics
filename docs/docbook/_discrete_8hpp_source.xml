<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__discrete_8hpp_source" xml:lang="pt-BR">
<title>Discrete.hpp</title>
<indexterm><primary>src/include/models/discrete/Discrete.hpp</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;DISCRETE_HPP_</emphasis>
2 <emphasis role="preprocessor">#define&#32;DISCRETE_HPP_</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&lt;unordered_map&gt;</emphasis>
8 
15 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;TYPE&gt;
16 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_discrete">Discrete</link>&#32;{
17 &#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_arithmetic_v&lt;TYPE&gt;,&#32;<emphasis role="stringliteral">&quot;TYPE&#32;must&#32;be&#32;a&#32;numeric&#32;type&quot;</emphasis>);
18 
19 &#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
20 &#32;&#32;&#32;std::unordered_map&lt;TYPE,&#32;double&gt;&#32;probabilities;
21 
27 &#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_discrete_1a2236be702570d1d1910e457c99f39cbe">sumOfProbabilities</link>()&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sum&#32;=&#32;0;
29 
30 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;[key,&#32;value]&#32;:&#32;probabilities)&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;+=&#32;value;
32 &#32;&#32;&#32;&#32;&#32;&#32;}
33 
34 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum;
35 &#32;&#32;&#32;}
36 
42 &#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_discrete_1aa5ef0af5b59335f36cd451b4e9f62afe">checkProbabilities</link>()&#32;{
43 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sum&#32;=&#32;<link linkend="_class_discrete_1a2236be702570d1d1910e457c99f39cbe">sumOfProbabilities</link>();
44 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sum&#32;!=&#32;1)&#32;{
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Probabilities&#32;do&#32;not&#32;sum&#32;to&#32;1&quot;</emphasis>);
46 &#32;&#32;&#32;&#32;&#32;&#32;}
47 &#32;&#32;&#32;}
48 
49 &#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
59 &#32;&#32;&#32;<link linkend="_class_discrete_1a9ec9797a8a85ec68c38138eac9cd46f6">Discrete</link>(std::unordered_map&lt;TYPE,&#32;double&gt;&#32;probabilities)&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;probabilities&#32;=&#32;probabilities;
61 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_discrete_1aa5ef0af5b59335f36cd451b4e9f62afe">checkProbabilities</link>();
62 &#32;&#32;&#32;}
63 
73 &#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_discrete_1a15bf1f18bb76f9d14313b5d932164458">getProbability</link>(TYPE&#32;value)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;probabilities.at(value);&#32;}
79 &#32;&#32;&#32;std::unordered_map&lt;TYPE,&#32;double&gt;&#32;<link linkend="_class_discrete_1a4ddb81cd5aa0c89fc7cbd705d396880c">getProbabilities</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;probabilities;
81 &#32;&#32;&#32;}
82 
92 &#32;&#32;&#32;<link linkend="_class_discrete">Discrete</link>&amp;&#32;<link linkend="_class_discrete_1a7ba3a169165603ac42e80c0fb4990545">setProbabilities</link>(std::unordered_map&lt;TYPE,&#32;double&gt;&#32;probabilities)&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;probabilities&#32;=&#32;probabilities;
94 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_discrete_1aa5ef0af5b59335f36cd451b4e9f62afe">checkProbabilities</link>();
95 
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
97 &#32;&#32;&#32;}
98 
104 &#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_discrete_1a93e18f96e474269c1881fae10c32cdfd">mean</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;meanOfProbabilities&#32;=&#32;0;
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;[key,&#32;value]&#32;:&#32;probabilities)&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meanOfProbabilities&#32;+=&#32;key&#32;*&#32;value;
109 &#32;&#32;&#32;&#32;&#32;&#32;}
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;meanOfProbabilities;
112 &#32;&#32;&#32;}
113 
119 &#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_discrete_1a401c200897d1eac25b769bc2fd622428">variance</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;meanOfProbabilities&#32;=&#32;<link linkend="_class_discrete_1a93e18f96e474269c1881fae10c32cdfd">mean</link>();
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;varianceOfProbabilities&#32;=&#32;0;
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;[key,&#32;value]&#32;:&#32;probabilities)&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;varianceOfProbabilities
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+=&#32;std::pow(key&#32;-&#32;meanOfProbabilities,&#32;2)&#32;*&#32;value;
126 &#32;&#32;&#32;&#32;&#32;&#32;}
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;varianceOfProbabilities;
129 &#32;&#32;&#32;}
130 };
131 
132 <emphasis role="preprocessor">#endif&#32;</emphasis>
</programlisting></section>
