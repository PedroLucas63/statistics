<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__statistics_8hpp_source" xml:lang="pt-BR">
<title>Statistics.hpp</title>
<indexterm><primary>src/include/Statistics.hpp</primary></indexterm>
Ir para a documentação desse arquivo.<programlisting linenumbering="unnumbered">1 
12 <emphasis role="preprocessor">#ifndef&#32;STATISTICS_HPP_</emphasis>
13 <emphasis role="preprocessor">#define&#32;STATISTICS_HPP_</emphasis>
14 
15 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&lt;unordered_map&gt;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
22 
23 <emphasis role="keyword">namespace&#32;</emphasis>stats&#32;{
31 &#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;TYPE&gt;
32 &#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classstats_1_1_statistics">Statistics</link>&#32;{
33 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_arithmetic_v&lt;TYPE&gt;,&#32;<emphasis role="stringliteral">&quot;TYPE&#32;must&#32;be&#32;a&#32;numeric&#32;type&quot;</emphasis>);
34 
35 &#32;&#32;<emphasis role="keyword">private</emphasis>:
36 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TYPE&gt;&#32;values;
37 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;populationData;
38 
44 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ensureNotEmpty()<emphasis role="keyword">&#32;const&#32;</emphasis>{
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(values.empty())&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Values&#32;are&#32;empty&quot;</emphasis>);
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
48 &#32;&#32;&#32;&#32;&#32;&#32;}
49 
50 &#32;&#32;<emphasis role="keyword">public</emphasis>:
57 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstats_1_1_statistics_1a4478cf7c0646a7246613d86bdbb83e53">Statistics</link>(<emphasis role="keywordtype">bool</emphasis>&#32;populationData&#32;=&#32;<emphasis role="keyword">true</emphasis>)
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;populationData(populationData)&#32;{&#32;}
59 
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ItInput,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;ItInput&gt;::iterator_category&gt;
72 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstats_1_1_statistics_1a1f50dd9b77aa94d3c158e159101e76eb">Statistics</link>(ItInput&#32;first,&#32;ItInput&#32;last,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;populationData&#32;=&#32;<emphasis role="keyword">true</emphasis>)
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;populationData(populationData)&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstats_1_1_statistics_1a5868d8066a92bba4f2a79750b8787acb">setValues</link>(first,&#32;last);
75 &#32;&#32;&#32;&#32;&#32;&#32;}
76 
84 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstats_1_1_statistics_1a24d21847d0dc97776fcad300f3eb228a">Statistics</link>(std::initializer_list&lt;TYPE&gt;&#32;list,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;populationData&#32;=&#32;<emphasis role="keyword">true</emphasis>)
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;populationData(populationData)&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstats_1_1_statistics_1a5868d8066a92bba4f2a79750b8787acb">setValues</link>(list);
87 &#32;&#32;&#32;&#32;&#32;&#32;}
88 
94 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TYPE&gt;&#32;<link linkend="_classstats_1_1_statistics_1aedaf64ac5f10e910f0d139bda96a6e4a">getValues</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;values;&#32;}
95 
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1a6ab1698a69d1c46e50894a14879d6518">isPopulationData</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;populationData;&#32;}
103 
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ItInput,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;ItInput&gt;::iterator_category&gt;
116 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstats_1_1_statistics">Statistics</link>&amp;&#32;<link linkend="_classstats_1_1_statistics_1a5868d8066a92bba4f2a79750b8787acb">setValues</link>(ItInput&#32;first,&#32;ItInput&#32;last)&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.assign(first,&#32;last);
118 
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
120 &#32;&#32;&#32;&#32;&#32;&#32;}
121 
129 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstats_1_1_statistics">Statistics</link>&amp;&#32;<link linkend="_classstats_1_1_statistics_1a7f65ade022fe9da4d6ea4ec5fc73a19d">setValues</link>(std::initializer_list&lt;TYPE&gt;&#32;list)&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.assign(list);
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
133 &#32;&#32;&#32;&#32;&#32;&#32;}
134 
143 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstats_1_1_statistics">Statistics</link>&amp;&#32;<link linkend="_classstats_1_1_statistics_1adccc7acbcdc9405a0e28988418360b21">setPopulationData</link>(<emphasis role="keywordtype">bool</emphasis>&#32;populationData&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;populationData&#32;=&#32;populationData;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
147 &#32;&#32;&#32;&#32;&#32;&#32;}
148 
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1a5d3a394412a143a7e63378ebdf6497a1">size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;values.size();&#32;}
155 
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1a15a337957ee8267406a80b8e92df4c51">calculateSum</link>(std::function&lt;<emphasis role="keywordtype">double</emphasis>(TYPE)&gt;&#32;function
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;[](TYPE&#32;value)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;&#32;})&#32;<emphasis role="keyword">const</emphasis>&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sum&#32;=&#32;0;
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;:&#32;values)&#32;{
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;+=&#32;function(value);
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum;
175 &#32;&#32;&#32;&#32;&#32;&#32;}
176 
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1a87940e9555c682df9c1a04b7073fe0e3">mean</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;values.empty()&#32;?&#32;0&#32;:&#32;<link linkend="_classstats_1_1_statistics_1a15a337957ee8267406a80b8e92df4c51">calculateSum</link>()&#32;/&#32;<link linkend="_classstats_1_1_statistics_1a5d3a394412a143a7e63378ebdf6497a1">size</link>();
187 &#32;&#32;&#32;&#32;&#32;&#32;}
188 
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1ab4522784ff98a9388b310fdda18f2bfb">median</link>()&#32;{
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureNotEmpty();
200 
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(values.begin(),&#32;values.end());
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mid&#32;=&#32;values.size()&#32;/&#32;2;
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;values.size()&#32;%&#32;2&#32;==&#32;0
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(values[mid&#32;-&#32;1]&#32;+&#32;values[mid])&#32;/&#32;2
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(values[mid]);
207 &#32;&#32;&#32;&#32;&#32;&#32;}
208 
218 &#32;&#32;&#32;&#32;&#32;&#32;TYPE&#32;<link linkend="_classstats_1_1_statistics_1a1bde50be330ea9ed5d1aee3fc19f6293">mode</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureNotEmpty();
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unordered_map&lt;TYPE,&#32;int&gt;&#32;frequency;
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;value&#32;:&#32;values)&#32;{
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++frequency[value];
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
226 
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::max_element(frequency.begin(),
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frequency.end(),
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;a,&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;b)&#32;{&#32;return&#32;a.second&#32;&lt;&#32;b.second;&#32;})
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;first;
231 &#32;&#32;&#32;&#32;&#32;&#32;}
232 
243 &#32;&#32;&#32;&#32;&#32;&#32;TYPE&#32;<link linkend="_classstats_1_1_statistics_1a3b51b0ddefd7a41132bb963dca80595c">amplitude</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureNotEmpty();
245 
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[minValue,&#32;maxValue]
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::minmax_element(values.begin(),&#32;values.end());
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*maxValue&#32;-&#32;*minValue;
249 &#32;&#32;&#32;&#32;&#32;&#32;}
250 
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1a3ecbdb096e994586cd0441def847db5c">variance</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(values.empty())&#32;{
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;meanOfValues&#32;=&#32;<link linkend="_classstats_1_1_statistics_1a87940e9555c682df9c1a04b7073fe0e3">mean</link>();
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sumOfValues&#32;=&#32;<link linkend="_classstats_1_1_statistics_1a15a337957ee8267406a80b8e92df4c51">calculateSum</link>([meanOfValues](TYPE&#32;value)&#32;{
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pow(value&#32;-&#32;meanOfValues,&#32;2);
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
269 
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;populationData&#32;?&#32;sumOfValues&#32;/&#32;<link linkend="_classstats_1_1_statistics_1a5d3a394412a143a7e63378ebdf6497a1">size</link>()
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;sumOfValues&#32;/&#32;(<link linkend="_classstats_1_1_statistics_1a5d3a394412a143a7e63378ebdf6497a1">size</link>()&#32;-&#32;1);
272 &#32;&#32;&#32;&#32;&#32;&#32;}
273 
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1ae84330f13ceb0dcf26ce853596bc4b95">standardDeviation</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::sqrt(<link linkend="_classstats_1_1_statistics_1a3ecbdb096e994586cd0441def847db5c">variance</link>());&#32;}
283 
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1a344e0dec8df89d8b0014d90cd1023cea">coefficientOfVariation</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classstats_1_1_statistics_1a87940e9555c682df9c1a04b7073fe0e3">mean</link>()&#32;==&#32;0&#32;?&#32;0&#32;:&#32;<link linkend="_classstats_1_1_statistics_1ae84330f13ceb0dcf26ce853596bc4b95">standardDeviation</link>()&#32;/&#32;<link linkend="_classstats_1_1_statistics_1a87940e9555c682df9c1a04b7073fe0e3">mean</link>();
294 &#32;&#32;&#32;&#32;&#32;&#32;}
295 &#32;&#32;&#32;};
296 }
297 
298 <emphasis role="preprocessor">#endif&#32;</emphasis>
</programlisting></section>
